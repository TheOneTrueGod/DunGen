from Globals import *from Code.Units.Abilities import *import pygamedef loadGuildImage(name, isGif = True):		return pygame.image.load(os.path.join("Data", "Pics", "Guilds", name + ".gif" * isGif + ".png" * (not isGif)))class GuildInfo:	Names = ["Fighter", "Sorcerer", "Cleric"]	Types = enum("FIGHTER", "SORCERER", "CLERIC")	XPPenalty = [1.0, 1.1, 0.9]	Pictures = [loadGuildImage("Fighter"), loadGuildImage("Sorcerer"), loadGuildImage("Cleric")]	NumGuilds = 2	GuildStars = loadGuildImage("GuildLevelStars", False)	abilLevels = {Types.FIGHTER:{1:["PowerAttack"], 2:["TripleAttack"], 3:["Smash"], 4:["SplitAttack"], 5:["Charge"], 6:["BoomerangBlade"], 7:["Whirlwind"]}, 								Types.SORCERER:{2:["MagicMissile"], 3:["Sparks"], 4:["IcicleBlast"], 5:["MissileStorm"], 6:["Ignite"], 7:["IceBall"], 8:["Chill"], 9:["Explosion"], 10:["Immolation"]}, 								Types.CLERIC:{}}	GuildStats = {Types.FIGHTER:{"attack":[0, 5], "defense":[0, 5], "health":[40, 5]},								Types.SORCERER:{"attack":[0, 5], "defense":[0, 5], "health":[30, 5]},								Types.CLERIC:{"attack":[0, 5], "defense":[0, 5], "health":[50, 5]}}								#Health should go up by about 100 per level								#Attack and defense should go up by about 100 per level. 	#Note: an average difficulty monster killed is worth 100 * (2 ** floor) experience.def expToLevel(level, guildId):	return int((level/10.0 + 0.8) * 100 * (3 + level - int(level / 4.0) * 2) * GuildInfo.XPPenalty[guildId])	class Guild:	def __init__(self, id, unit):		self.guildID = id		self.unit = unit		self.experience = 0		self.targetExperience = 0		self.level = 1		self.levelChanged = False		self.nextAbilityAt = -1			def getStat(self, stat):		if self.guildID in GuildInfo.GuildStats and stat in GuildInfo.GuildStats[self.guildID]:			return GuildInfo.GuildStats[self.guildID][stat][0] + GuildInfo.GuildStats[self.guildID][stat][1] * (self.level - 1)		return 0			def getLevel(self):		if not self.levelChanged:			return int(self.level)		else:			expReq = expToLevel(self.level, self.guildID)			while self.experience >= expReq:				self.levelUp()				expReq = expToLevel(self.level, self.guildID)			self.levelChanged = False			return self.getLevel()				def getExperienceRequirement(self):		return expToLevel(self.getLevel(), self.guildID)				def moveTick(self):		if self.experience < self.targetExperience:			self.experience += (self.targetExperience - self.experience) * 0.02			if math.fabs(self.experience - self.targetExperience) <= 1:				self.experience = self.targetExperience						if self.experience > expToLevel(self.level, self.guildID):				self.levelChanged = True				self.getLevel()				def getNextAbility(self):		if self.level >= self.nextAbilityAt:			self.nextAbilityAt = -1			for level in GuildInfo.abilLevels[self.guildID]:				if level > self.level:					if self.nextAbilityAt == -1:						self.nextAbilityAt = level					else:						self.nextAbilityAt = min(self.nextAbilityAt, level)		return self.nextAbilityAt				def levelUp(self):		self.experience -= expToLevel(self.level, self.guildID)		self.targetExperience -= expToLevel(self.level, self.guildID)		self.unit.targetHealth = self.unit.maxHealth		self.level += 1		self.setGuild()		#print "Level Up!" #TODO: Probably should play some kind of "level up" effect here..."		if self.guildID in GuildInfo.abilLevels and self.level in GuildInfo.abilLevels[self.guildID]:			for ab in GuildInfo.abilLevels[self.guildID][self.level]:				self.unit.teachAbil(ab)				#print "New Ability Learned! '" + ab + "'" #TODO: Again, should probably play some kind of special effect.					def giveStartingAbilities(self):		on = 0		if self.guildID in GuildInfo.abilLevels and self.level in GuildInfo.abilLevels[self.guildID]:			for ab in GuildInfo.abilLevels[self.guildID][self.level]:				self.unit.teachAbil(ab)				self.unit.equipAbil(on)				on += 1					def setGuild(self):		self.unit.setMaxHealth(self.unit.getStat("health"))		pass				def getExperiencePct(self):		self.getLevel()		return self.experience / float(expToLevel(self.level, self.guildID))			def getExperienceToLevel(self):		self.getLevel()		return expToLevel(self.level, self.guildID) - self.experience				def addExperience(self, amount):		l = self.level		self.targetExperience += amount			class GuildLevels:	def __init__(self, unit):		self.unit = unit		self.guilds = []		for i in range(GuildInfo.NumGuilds):			self.guilds += [Guild(i, unit)]		self.activeGuild = 0		def addExperience(self, amount):		self.guilds[self.activeGuild].addExperience(amount)			def moveTick(self):		for g in self.guilds:			g.moveTick()				def getLevel(self, guild):		return int(self.guilds[guild].getLevel())			def getExperiencePct(self, guild):		return self.guilds[guild].getExperiencePct()			def getExperienceToLevel(self, guild):		return self.guilds[guild].getExperienceToLevel()			def getNextAbility(self, guild):		return self.guilds[guild].getNextAbility()			def getStat(self, stat):		if stat == "health":			return self.guilds[self.activeGuild].getStat(stat)		toRet = 0		for guild in self.guilds:			toRet = max(toRet, guild.getStat(stat))		return toRet			def setGuild(self, guild):		if 0 <= guild < GuildInfo.NumGuilds:			self.activeGuild = guild			self.guilds[guild].setGuild()			def setStartingGuild(self):		self.guilds[self.activeGuild].setGuild()		self.guilds[self.activeGuild].giveStartingAbilities()			def getActiveGuildIndex(self):		return self.activeGuild			def getActiveGuild(self):		return self.guilds[self.activeGuild]