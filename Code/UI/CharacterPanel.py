from GUI import View, Button, FileDialogs, Label, Fontfrom GUI.Files import FileType, DirReffrom Code.UI.Components import *from Code.UI.SkinSelector import *from Code.UI.Equipment import *from Code.UI.Church import *from Code.UI.AbilitySelect import *import UnitsCHARACTERDIR = DirRef(path = os.path.join("Profiles"))ViewTypes = enum('LOADSCREEN', 'MAINSCREEN', 'SKINSELECTSCREEN', 'EQUIPMENTSCREEN', 'CHURCHSCREEN', 'ABILITYSCREEN')class CharacterPanel(View):	currState = 0	playerNum = 0	def setupComponents(self):		hasCharView = CharacterView(size=self.size, model=self.model)		hasCharView.setupComponents(self)				ssv = SkinSelectView(size=self.size, model=self.model)		ssv.setupComponents(self)				ev = EquipmentView(size=self.size, model=self.model)		ev.setupComponents(self)				ch = ChurchView(size=self.size, model=self.model)		ch.setupComponents(self)				abilSel = AbilitySelect(size=self.size, model=self.model)		abilSel.setupComponents(self)				noCharView = View(size=self.size, model=self.model)		btn = Button(title = "Load Character", action = self.loadCharacter, style = 'default')		btn.position = ((self.width - btn.width) / 2, (self.height - btn.height) / 2 + 50)		noCharView.add(btn)		self.newCharField = TextField(width = 200, font=Font("Times", 16), enter_action=self.loadCharacter)		self.newCharField.position = ((self.width - self.newCharField.width) / 2, (self.height - self.newCharField.height) / 2 - 50)		noCharView.add(self.newCharField)		btn = Button(title = "Create", action = self.newCharacter, style = 'default')		btn.position = ((self.width - btn.width) / 2, (self.height + self.newCharField.height) / 2 - 50)		noCharView.add(btn)		noCharView.refreshComponent = self.refreshComponent				self.add(noCharView)				self.viewList = [noCharView, hasCharView, ssv, ev, ch, abilSel]			def reloadCharacters(self):		self.container.reloadCharacters()			def refreshComponent(self):		pass			def newCharacter(self):		name = self.newCharField.text		if len(name) > 3:			name = os.path.join("Profiles", name[:16] + ".prof")			if name in PLAYERFILES:				return			PLAYERFILES[self.playerNum] = name			u = Units.PlayerUnit(os.path.splitext(os.path.split(name)[1])[0])			u.saveToFile(name)			self.model.loadCharacter(name)			self.setView(ViewTypes.MAINSCREEN)			self.newCharField.text = ""				def autoLogIn(self):		name = os.path.join("Profiles", "asdf.prof")		unit = Units.PlayerUnit(os.path.splitext(os.path.split(name)[1])[0], 1)		unit.saveToFile(name)		del unit		PLAYERFILES[self.playerNum] = name		self.model.loadCharacter(name)		self.setView(ViewTypes.MAINSCREEN)			def loadCharacter(self):		file_types = [FileType(name = "Character File", suffix = "prof")]		result = FileDialogs.request_old_file("Open Character File:",				default_dir = CHARACTERDIR, file_types = file_types)		if result:			name = os.path.join(result.dir.path, result.name)			if name not in PLAYERFILES:				PLAYERFILES[self.playerNum] = name				self.model.loadCharacter(name)				self.setView(ViewTypes.MAINSCREEN)					def unloadCharacter(self):		PLAYERFILES[self.playerNum] = None		self.setView(ViewTypes.LOADSCREEN)			def setView(self, newState):		self.remove(self.viewList[self.currState])		self.currState = newState		self.add(self.viewList[self.currState])		self.viewList[self.currState].refreshComponent()			def draw(self, canvas, update_rect):		canvas.erase_rect(update_rect)		class CharacterView(View):	def setupComponents(self, parent):		self.charPortraits = [ImageTestView(width=self.width, height=self.height)]#, ImageTestView(width=self.width, height=self.height),													#ImageTestView(width=self.width, height=self.height), ImageTestView(width=self.width, height=self.height)]		self.charPortraits[0].position = ((self.width - 39 * 2) / 4, 38 / 2); 		#self.charPortraits[1].position = ((self.width - 10 - 39) / 2, (10) / 2); self.charPortraits[2].position = (10 / 2, (self.height - 10 - 39) / 2); self.charPortraits[3].position = ((self.width - 10 - 39) / 2, (self.height - 10 - 39) / 2);		for c in self.charPortraits:			self.add(c)				self.nameLabelY = 5		self.nameLabel = Label(text="NAME GOES HERE")		self.nameLabel.position = (self.width / 2 - self.nameLabel.width / 2, self.nameLabelY)		self.add(self.nameLabel)				separation = 25		initial = -6		y = 2		#self.reloadButton = Button(title = "Load New Character", action = parent.loadCharacter, style = 'default')		#self.reloadButton.position = ((self.width - self.reloadButton.width) / 2, 39 * 2 + initial + y * separation)		#self.add(self.reloadButton)		btn = Button(title = "Change Image", action = self.setPicClick, style = 'default')		btn.position = ((self.width - btn.width) / 2, 39 * 2 + initial + y * separation)		self.add(btn)		y += 1		#Remove this character from this slot so we can load a new character		btn = Button(title = "Unload Character", action = parent.unloadCharacter, style = 'default')		btn.position = ((self.width - btn.width) / 2, 39 * 2 + initial + y * separation)		self.add(btn)		y += 2		#Take a look at our inventory and equip stuff we have		btn = Button(title = "Inventory", enabled=True, action = self.inventoryClick, style = 'default')		btn.position = (self.width / 4 - btn.width / 2, 39 * 2 + initial + y * separation)		self.add(btn)		#Look at our currently owned abilities and equip them.		btn = Button(title = "Abilities", enabled=True, action = self.abilitiesClick, style = 'default')		btn.position = (self.width * 3 / 4 - btn.width / 2, 39 * 2 + initial + y * separation)		self.add(btn)		y += 1		#Display screen showing a bunch of our stats, such as attack, defense, gold, monsters killed, highest level reached, etc.		btn = Button(title = "Stats", enabled=False, action = parent.unloadCharacter, style = 'default')		btn.position = (self.width / 4 - btn.width / 2, 39 * 2 + initial + y * separation)		self.add(btn)		#Display screen showing our level in each guild		btn = Button(title = "Skills", enabled=False, action = parent.unloadCharacter, style = 'default')		btn.position = (self.width * 3 / 4 - btn.width / 2, 39 * 2 + initial + y * separation)		self.add(btn)		y += 2		#Buy items here		btn = Button(title = "Store", enabled=False, action = parent.unloadCharacter, style = 'default')		btn.position = (self.width / 4 - btn.width / 2, 39 * 2 + initial + y * separation)		self.add(btn)		#Learn skills here		btn = Button(title = "Trainer", enabled=False, action = parent.unloadCharacter, style = 'default')		btn.position = (self.width * 3 / 4 - btn.width / 2, 39 * 2 + initial + y * separation)		self.add(btn)		y += 1		#Resurrections, full heals, random buffs for donations		btn = Button(title = "Church", enabled=True, action = self.churchClick, style = 'default')		btn.position = (self.width / 4 - btn.width / 2, 39 * 2 + initial + y * separation)		self.add(btn)		#Confinement -- holds monsters.		btn = Button(title = "Breeder", enabled=False, action = parent.unloadCharacter, style = 'default')		btn.position = (self.width * 3 / 4 - btn.width / 2, 39 * 2 + initial + y * separation)		self.add(btn)		y += 1		#No Clue!		btn = Button(title = "Monastary", enabled=False, action = parent.unloadCharacter, style = 'default')		btn.position = (self.width / 4 - btn.width / 2, 39 * 2 + initial + y * separation)		self.add(btn)		#Randomly generated quests.		btn = Button(title = "Job Board", enabled=False, action = parent.unloadCharacter, style = 'default')		btn.position = (self.width * 3 / 4 - btn.width / 2, 39 * 2 + initial + y * separation)		self.add(btn)			def refreshComponent(self):		pass			def inventoryClick(self):		self.container.setView(ViewTypes.EQUIPMENTSCREEN)		def abilitiesClick(self):		self.container.setView(ViewTypes.ABILITYSCREEN)			def churchClick(self):		self.container.setView(ViewTypes.CHURCHSCREEN)			def imageClicked(self, mPos):		self.container.setView(ViewTypes.SKINSELECTSCREEN)			def setPicClick(self):		self.container.setView(ViewTypes.SKINSELECTSCREEN)			def characterChanged(self, model, character):		if character:			self.invalidate()			#self.reloadButton.title = character.getName()			for c in self.charPortraits:				c.setImage(character.picture)					self.remove(self.nameLabel)			oldLabel = self.nameLabel			self.nameLabel = Label(text=character.getName(), font=Font("impact", 32))			self.nameLabel.position = (self.width / 2 - self.nameLabel.width / 2, oldLabel.position[1])			self.add(self.nameLabel)